[{"/Users/observe.ai_36/Desktop/live-code-share/src/index.js":"1","/Users/observe.ai_36/Desktop/live-code-share/src/reportWebVitals.js":"2","/Users/observe.ai_36/Desktop/live-code-share/src/firebase-config.js":"3","/Users/observe.ai_36/Desktop/live-code-share/src/components/App/App.js":"4","/Users/observe.ai_36/Desktop/live-code-share/src/components/Editor/Editor.js":"5","/Users/observe.ai_36/Desktop/live-code-share/src/utils/firebaseRealtime.js":"6","/Users/observe.ai_36/Desktop/live-code-share/src/components/App/Appcontainer.js":"7","/Users/observe.ai_36/Desktop/live-code-share/src/components/Error/index.js":"8","/Users/observe.ai_36/Desktop/live-code-share/src/components/Header/index.js":"9","/Users/observe.ai_36/Desktop/live-code-share/src/components/Users/index.js":"10","/Users/observe.ai_36/Desktop/live-code-share/src/components/Users/UserList/index.js":"11","/Users/observe.ai_36/Desktop/live-code-share/src/components/FileSaver/index.js":"12","/Users/observe.ai_36/Desktop/live-code-share/src/context/userContext.js":"13","/Users/observe.ai_36/Desktop/live-code-share/src/context/htmlContext.js":"14","/Users/observe.ai_36/Desktop/live-code-share/src/components/Autorun/index.js":"15"},{"size":1080,"mtime":1613193885299,"results":"16","hashOfConfig":"17"},{"size":364,"mtime":1610781162469,"results":"18","hashOfConfig":"17"},{"size":413,"mtime":1610781162468,"results":"19","hashOfConfig":"17"},{"size":6118,"mtime":1613193885291,"results":"20","hashOfConfig":"17"},{"size":1467,"mtime":1613193885293,"results":"21","hashOfConfig":"17"},{"size":343,"mtime":1611207548615,"results":"22","hashOfConfig":"17"},{"size":1223,"mtime":1613193885291,"results":"23","hashOfConfig":"17"},{"size":413,"mtime":1613193885293,"results":"24","hashOfConfig":"17"},{"size":975,"mtime":1613193885294,"results":"25","hashOfConfig":"17"},{"size":662,"mtime":1613193885297,"results":"26","hashOfConfig":"17"},{"size":789,"mtime":1613193885295,"results":"27","hashOfConfig":"17"},{"size":1389,"mtime":1613193885294,"results":"28","hashOfConfig":"17"},{"size":157,"mtime":1613193885298,"results":"29","hashOfConfig":"17"},{"size":157,"mtime":1613193885298,"results":"30","hashOfConfig":"17"},{"size":909,"mtime":1613193885292,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o2ity9",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/observe.ai_36/Desktop/live-code-share/src/index.js",[],"/Users/observe.ai_36/Desktop/live-code-share/src/reportWebVitals.js",[],[],"/Users/observe.ai_36/Desktop/live-code-share/src/firebase-config.js",[],"/Users/observe.ai_36/Desktop/live-code-share/src/components/App/App.js",["66","67","68","69"],"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Firebase from 'firebase';\nimport rand from 'random-key';\nimport { ShrinkOutlined, ArrowsAltOutlined } from '@ant-design/icons';\n\n//component\nimport Editor from '../Editor/Editor';\nimport Header from '../Header';\n\n//utils\nimport firebaseRealTime from '../../utils/firebaseRealtime';\n//cotext\nimport { UserContextProvider } from '../../context/userContext';\nimport { HtmlContextProvider } from '../../context/htmlContext';\n\n//css\nimport './App.scss';\n\nconst App = ({ sessionId, isNewSession }) => {\n  const [html, setHtml] = useState('');\n  const [autoRun, setAutoRun] = useState(true);\n  const [css, setCss] = useState('');\n  const [js, setJs] = useState('');\n  const [userId, setUserId] = useState(() => {\n    if (sessionStorage.getItem('user')) {\n      return JSON.parse(sessionStorage.getItem('user')).userId;\n    }\n    return;\n  });\n  const [users, setUsers] = useState([]);\n  const [iframeSrc, setIframeSrc] = useState('');\n  const [iframeOpen, setIframeOpen] = useState(true);\n  let fireBaseRef = `live-sessions/${sessionId}`;\n  const fireBaseDatabaseRef = Firebase.database().ref(fireBaseRef);\n  const setValueFromSnapshot = (\n    snapshot = { val: () => ({ html: '', css: '', js: '' }) }\n  ) => {\n    const { html = '', css = '', js = '', users = {} } = snapshot.val() || {};\n    setHtml(html);\n    setCss(css);\n    setJs(js);\n    setUsers(Object.values(users).filter((item) => item.status === 'online'));\n  };\n  useEffect(() => {\n    fireBaseDatabaseRef\n      .once('value')\n      .then((snapshot) => {\n        if (snapshot.exists()) {\n          setValueFromSnapshot(snapshot);\n        }\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n    fireBaseDatabaseRef.on('value', (snapshot) => {\n      if (snapshot.exists()) {\n        setValueFromSnapshot(snapshot);\n      }\n    });\n  }, []);\n  const getNewUserInSession = () => {\n    const userId = rand.generate(3);\n    setUserId(userId);\n    let newUser = { name: `User_${userId}`, status: 'online', userId };\n    sessionStorage.setItem('user', JSON.stringify(newUser));\n    return { userId, newUser };\n  };\n  useEffect(() => {\n    if (isNewSession) {\n      const { userId, newUser } = getNewUserInSession();\n      firebaseRealTime(fireBaseDatabaseRef).set({\n        html,\n        css,\n        js,\n        users: { [userId]: newUser },\n      });\n    }\n    if (!isNewSession && !userId) {\n      const { userId, newUser } = getNewUserInSession();\n      firebaseRealTime(fireBaseDatabaseRef).update({\n        [`users/${userId}`]: newUser,\n      });\n    }\n    if (!isNewSession && userId) {\n      firebaseRealTime(fireBaseDatabaseRef).update({\n        [`users/${userId}/status`]: 'online',\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (autoRun) {\n        if (html || css || js) {\n          refreshIframe();\n        }\n      } else {\n        timeout && clearTimeout(timeout);\n      }\n    }, 300);\n    return () => timeout && clearTimeout(timeout);\n  }, [html, css, js, autoRun]);\n\n  useEffect(() => {\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible') {\n        if (userId) {\n          firebaseRealTime(fireBaseDatabaseRef).update({\n            [`users/${userId}/status`]: 'online',\n          });\n        }\n      } else {\n        if (document.visibilityState === 'hidden' && userId) {\n          firebaseRealTime(fireBaseDatabaseRef).update({\n            [`users/${userId}/status`]: 'away',\n          });\n        }\n      }\n    });\n  });\n  const refreshIframe = () => {\n    setIframeSrc(`<html>\n                        <body>${html}</body>\n                         <style>${css}</style>\n                         <script>${js}</script>\n                     </html>`);\n  };\n  const saveToFireBase = (key, value) => {\n    firebaseRealTime(Firebase.database().ref(fireBaseRef)).update({\n      [key]: value,\n    });\n  };\n  const onNameChange = (id, e) => {\n    firebaseRealTime(Firebase.database().ref(fireBaseRef)).update({\n      [`users/${id}/name`]: e.target.value,\n    });\n  };\n  return (\n    <>\n      <UserContextProvider value={userId}>\n        <HtmlContextProvider value={iframeSrc}>\n          <Header\n            users={users}\n            onNameChange={onNameChange}\n            autoRun={autoRun}\n            refreshIframe={refreshIframe}\n            setAutoRun={setAutoRun}\n          />\n        </HtmlContextProvider>\n      </UserContextProvider>\n      <div className={`pane top-pane ${!iframeOpen ? 'expanded' : ''}`}>\n        <Editor\n          language={'xml'}\n          title={'HTML'}\n          value={html}\n          onChange={(value) => {\n            saveToFireBase('html', value);\n            setHtml(value);\n          }}\n        />\n        <Editor\n          language={'css'}\n          title={'CSS'}\n          value={css}\n          onChange={(value) => {\n            saveToFireBase('css', value);\n            setCss(value);\n          }}\n        />\n        <Editor\n          language={'javascript'}\n          title={'JS'}\n          value={js}\n          onChange={(value) => {\n            saveToFireBase('js', value);\n            setJs(value);\n          }}\n        />\n      </div>\n      <div className={`pane ${!iframeOpen ? 'collapased' : ''}`}>\n        <div className={'iframe-container'}>\n          <header className={'iframe-header'}>\n            <div>Output:-</div>\n            <div\n              className={'iframe-action'}\n              onClick={() => setIframeOpen((prev) => !prev)}\n            >\n              {iframeOpen ? <ShrinkOutlined /> : <ArrowsAltOutlined />}\n            </div>\n          </header>\n          <div>\n            <iframe\n              srcDoc={iframeSrc}\n              title={'output'}\n              sandbox={'allow-scripts'}\n              frameBorder={0}\n              width={'100%'}\n              height={'100%'}\n            ></iframe>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\nApp.propTypes = {\n  sessionId: PropTypes.string,\n  isNewSession: PropTypes.bool,\n};\nexport default React.memo(App);\n","/Users/observe.ai_36/Desktop/live-code-share/src/components/Editor/Editor.js",[],"/Users/observe.ai_36/Desktop/live-code-share/src/utils/firebaseRealtime.js",[],"/Users/observe.ai_36/Desktop/live-code-share/src/components/App/Appcontainer.js",["70"],"import React, { useState, useEffect } from 'react';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport App from './App';\nimport rand from 'random-key';\nimport Firebase from 'firebase';\n\nconst AppContainer = () => {\n  const [sessionId, setsessionId] = useState(useParams().sessionId);\n  const [isNewSession, setIsNewSession] = useState(false);\n  const [sessionChecked, setSessionChecked] = useState(false);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!sessionId) {\n      const randomSessionId = rand.generate(10);\n      history.push({ pathname: `/${randomSessionId}` });\n      setsessionId(randomSessionId);\n      setSessionChecked(true);\n      setIsNewSession(true);\n    } else {\n      Firebase.database()\n        .ref(`live-sessions/${sessionId}`)\n        .once('value', (snapshot) => {\n          if (snapshot.exists()) {\n            setSessionChecked(true);\n            return true;\n          } else {\n            history.push('/error/page');\n            return false;\n          }\n        });\n    }\n  }, []);\n\n  return (\n    <>\n      {sessionId && sessionChecked && (\n        <App sessionId={sessionId} isNewSession={isNewSession} />\n      )}\n    </>\n  );\n};\n\nexport default AppContainer;\n","/Users/observe.ai_36/Desktop/live-code-share/src/components/Error/index.js",[],"/Users/observe.ai_36/Desktop/live-code-share/src/components/Header/index.js",[],"/Users/observe.ai_36/Desktop/live-code-share/src/components/Users/index.js",[],"/Users/observe.ai_36/Desktop/live-code-share/src/components/Users/UserList/index.js",[],"/Users/observe.ai_36/Desktop/live-code-share/src/components/FileSaver/index.js",["71"],"import React, { useContext } from 'react';\n\nimport { Button, Dropdown, Menu } from 'antd';\nimport { saveAs } from 'file-saver';\nimport { jsPDF } from 'jspdf';\n\nimport { DownloadOutlined } from '@ant-design/icons';\nimport HtmlContext from '../../context/htmlContext';\n\nconst TXT = 'txt';\nconst PDF = 'pdf';\nconst FILE_TYPE = {\n  [TXT]: 'text/plain;charset=utf-8',\n  [PDF]: 'application/pdf',\n};\nconst MENU_OPTIONS = [\n  {\n    title: 'Txt File',\n    key: TXT,\n  },\n  {\n    title: 'Pdf File',\n    key: PDF,\n  },\n];\nconst MenuItems = ({ handleClick }) => (\n  <Menu onClick={handleClick}>\n    {MENU_OPTIONS.map(({ key, title }) => (\n      <Menu.Item key={key}>{title}</Menu.Item>\n    ))}\n  </Menu>\n);\nconst FileSaver = () => {\n  const html = useContext(HtmlContext);\n\n  const handleClick = (e) => {\n    let fileName = 'sharedcode.txt';\n    let doc;\n    switch (e.key) {\n      case TXT:\n        saveAs(new Blob([html], { type: FILE_TYPE[e.key] }), fileName);\n        break;\n      case PDF:\n        fileName = 'sharedCode.pdf';\n        doc = new jsPDF();\n        doc.text(html, 10, 10);\n        doc.save(fileName);\n    }\n  };\n  return (\n    <Dropdown\n      key={'1'}\n      overlay={<MenuItems handleClick={handleClick} />}\n      placement=\"bottomLeft\"\n      arrow\n    >\n      <Button shape=\"circle\" icon={<DownloadOutlined />} size={'small'} />\n    </Dropdown>\n  );\n};\n\nexport default FileSaver;\n","/Users/observe.ai_36/Desktop/live-code-share/src/context/userContext.js",[],"/Users/observe.ai_36/Desktop/live-code-share/src/context/htmlContext.js",[],"/Users/observe.ai_36/Desktop/live-code-share/src/components/Autorun/index.js",[],{"ruleId":"72","severity":1,"message":"73","line":55,"column":9,"nodeType":"74","messageId":"75","endLine":55,"endColumn":20},{"ruleId":"76","severity":1,"message":"77","line":62,"column":6,"nodeType":"78","endLine":62,"endColumn":8,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":91,"column":6,"nodeType":"78","endLine":91,"endColumn":8,"suggestions":"81"},{"ruleId":"76","severity":1,"message":"82","line":104,"column":6,"nodeType":"78","endLine":104,"endColumn":30,"suggestions":"83"},{"ruleId":"76","severity":1,"message":"84","line":34,"column":6,"nodeType":"78","endLine":34,"endColumn":8,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":26,"column":22,"nodeType":"88","endLine":26,"endColumn":33},"no-console","Unexpected console statement.","MemberExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fireBaseDatabaseRef'. Either include it or remove the dependency array.","ArrayExpression",["89"],"React Hook useEffect has missing dependencies: 'css', 'fireBaseDatabaseRef', 'html', 'isNewSession', 'js', and 'userId'. Either include them or remove the dependency array.",["90"],"React Hook useEffect has a missing dependency: 'refreshIframe'. Either include it or remove the dependency array.",["91"],"React Hook useEffect has missing dependencies: 'history' and 'sessionId'. Either include them or remove the dependency array.",["92"],"react/prop-types","'handleClick' is missing in props validation","Property",{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [fireBaseDatabaseRef]",{"range":"101","text":"102"},"Update the dependencies array to be: [css, fireBaseDatabaseRef, html, isNewSession, js, userId]",{"range":"103","text":"104"},"Update the dependencies array to be: [html, css, js, autoRun, refreshIframe]",{"range":"105","text":"106"},"Update the dependencies array to be: [history, sessionId]",{"range":"107","text":"108"},[1901,1903],"[fireBaseDatabaseRef]",[2773,2775],"[css, fireBaseDatabaseRef, html, isNewSession, js, userId]",[3063,3087],"[html, css, js, autoRun, refreshIframe]",[1038,1040],"[history, sessionId]"]